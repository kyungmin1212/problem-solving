"""
문제 : 민오는 1번부터 N번까지 총 N개의 문제로 되어 있는 문제집을 풀려고 한다.
문제는 난이도 순서로 출제되어 있다. 즉 1번 문제가 가장 쉬운 문제이고 N번 문제가 가장 어려운 문제가 된다.
어떤 문제부터 풀까 고민하면서 문제를 훑어보던 민오는, 몇몇 문제들 사이에는 '먼저 푸는 것이 좋은 문제'가 있다는 것을 알게 되었다.
예를 들어 1번 문제를 풀고 나면 4번 문제가 쉽게 풀린다거나 하는 식이다.
민오는 다음의 세 가지 조건에 따라 문제를 풀 순서를 정하기로 하였다.

1. N개의 문제는 모두 풀어야 한다.
2. 먼저 푸는 것이 좋은 문제가 있는 문제는, 먼저 푸는 것이 좋은 문제를 반드시 먼저 풀어야 한다.
3. 가능하면 쉬운 문제부터 풀어야 한다.

예를 들어서 네 개의 문제가 있다고 하자. 4번 문제는 2번 문제보다 먼저 푸는 것이 좋고,
3번 문제는 1번 문제보다 먼저 푸는 것이 좋다고 하자. 만일 4-3-2-1의 순서로 문제를 풀게 되면 조건 1과 조건 2를 만족한다.
하지만 조건 3을 만족하지 않는다. 4보다 3을 충분히 먼저 풀 수 있기 때문이다. 따라서 조건 3을 만족하는 문제를 풀 순서는 3-1-4-2가 된다.
문제의 개수와 먼저 푸는 것이 좋은 문제에 대한 정보가 주어졌을 때,
주어진 조건을 만족하면서 민오가 풀 문제의 순서를 결정해 주는 프로그램을 작성하시오.
입력 : 첫째 줄에 문제의 수 N(1 ≤ N ≤ 32,000)과 먼저 푸는 것이 좋은 문제에 대한 정보의 개수 M(1 ≤ M ≤ 100,000)이 주어진다.
둘째 줄부터 M개의 줄에 걸쳐 두 정수의 순서쌍 A,B가 빈칸을 사이에 두고 주어진다.
이는 A번 문제는 B번 문제보다 먼저 푸는 것이 좋다는 의미이다.
항상 문제를 모두 풀 수 있는 경우만 입력으로 주어진다.
출력 : 첫째 줄에 문제 번호를 나타내는 1 이상 N 이하의 정수들을 민오가 풀어야 하는 순서대로 빈칸을 사이에 두고 출력한다.
"""

import heapq

n,m=map(int, input().split())
array=[[] for i in range(n+1)]
# 0 부터 n 까지 [] 공간을 리스트 안에 만들어준다. 총 n+1개
indegree=[0]*(n+1)
# [0,0,0,...,0] 0이 n+1개 있다.

heap=[]
result=[]

for _ in range(m):
    x,y=map(int,input().split())
    array[x].append(y)
    indegree[y]+=1
# array 인덱스 번호 x 가 y 보다 먼저와야한다.
# indegree[y] y보다 앞에 있는것이 있으면 1을 늘려준다. indegree[y]가 1이라면 먼저 나와야하는것이 있는 것이다.
# 2라면은 연결된것이 두개 array[2]=1,array[4]=1 이런식으로 1에 두개가 앞에 먼저 나와야한다는것이다.

for i in range(1,n+1):
    if indegree[i]==0:
        heapq.heappush(heap,i)
# y보다 앞에 있어야하는 것들이 없으면 그냥 heap 에 최소힙으로 추가시켜주면 된다.
# y보다 앞에 있어야하는 것들은 그 앞에 있어야하는 숫자들이 heqp 에 먼저 들어가있게 된다.
# 그후에 heap 에서 데이터를 꺼내고 그 데이터가 나와야지 나올수 있는 숫자들중에서 더이상 뒤에 연결된게 없다면 heap 에다가 넣어준다.

# heap 에 데이터가 있다면 무한반복
while heap:
    # y보다 앞에 있어야하는 것들이 없으면 그냥 바로 꺼내면 된다.
    data=heapq.heappop(heap)
    result.append(data)
    # data를 꺼내고 그 데이터가 먼저나와야지 나올수 있는 숫자리스트 array[data]
    # array[data]는 data 라는 숫자가 먼저나와야지 나올수 있는 숫자들이 있는 리스트이다.
    for y in array[data]:
        indegree[y]-=1
        # data가 heap 에서 꺼내져서 result 에 들어갔으므로 먼저나올숫자가 나오게 된것이다.
        if indegree[y]==0:
            heapq.heappush(heap,y)

for i in result:
    print(i,end=" ")